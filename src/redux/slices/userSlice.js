import {createSlice} from '@reduxjs/toolkit';
export const userSlice=createSlice({
    name:"user",
    initialState:{
        userLoading:false
    },
    reducers:{
        userDataRequest:(state)=>{
            return{
                ...state,
                userLoading:true
            }
        },
        userDataSuccess:(state,action)=>{
            return{
                userLoading:false,
                user:action.payload.user
            }
        },
        userDataFail:(state)=>{
            return{
                ...state,
                userLoading:false,
                user:undefined
            }
        },
        updateLinkRequest:(state)=>{
            return{
                ...state,
                userLoading:true
            }
        },
        updateLinkSuccess:(state,action)=>{
            return{
                userLoading:false,
                user:action.payload.user
            }
        },
        updateLinkFail:(state)=>{
            return{
                userLoading:false,
                ...state
            }
        },
        updateAvatarRequest:(state)=>{
            return{
                ...state,
                userLoading:true
            }
        },
        updateAvatarSuccess:(state,action)=>{
            return{
                userLoading:false,
                user:action.payload.user
            }
        },
        updateAvatarFail:(state)=>{
            return{
                userLoading:false,
                ...state
            }
        },
        updateNameRequest:(state)=>{
            return{
                ...state,
                userLoading:true
            }
        },
        updateNameSuccess:(state,action)=>{
            return{
                userLoading:false,
                user:action.payload.user
            }
        },
        updateNameFail:(state)=>{
            return{
                userLoading:false,
                ...state
            }
        },
        updateBioRequest:(state)=>{
            return{
                ...state,
                userLoading:true
            }
        },
        updateBioSuccess:(state,action)=>{
            return{
                userLoading:false,
                user:action.payload.user
            }
        },
        updateBioFail:(state)=>{
            return{
                ...state,
                userLoading:false
            }
        },
        updateThemeRequest:(state)=>{
            return{
                ...state,
                userLoading:true
            }
        },
        updateThemeSuccess:(state,action)=>{
            return{
                userLoading:false,
                user:action.payload.user
            }
        },
        updateThemeFail:(state)=>{
            return{
                ...state,
                userLoading:false
            }
        }
    }
})
export const{userDataRequest,userDataSuccess,userDataFail,updateLinkRequest,updateLinkSuccess,updateLinkFail,updateAvatarRequest,updateAvatarSuccess,updateAvatarFail,updateNameRequest,updateNameSuccess,updateNameFail,updateBioRequest,updateBioSuccess,updateBioFail,updateThemeRequest,updateThemeSuccess,updateThemeFail}=userSlice.actions;
export default userSlice.reducer;